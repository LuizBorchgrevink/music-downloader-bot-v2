from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, filters, ContextTypes
import subprocess
import os
import yt_dlp
from pathlib import Path
import tempfile
import logging
import time
import asyncio
from datetime import datetime
from flask import Flask
from threading import Thread

# Configurar logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

TOKEN = os.environ.get('TOKEN')
DOWNLOAD_DIR = "descargas"

# ==================== CLASE PARA TRACKING DE PROGRESO ====================

class ProgressTracker:
    def __init__(self, message):
        self.message = message
        self.start_time = time.time()
        self.last_update = 0
        self.current_task = ""
        self.task_times = {}
        self.task_start = None

    async def start_task(self, task_name):
        """Inicia una nueva tarea y registra el tiempo"""
        if self.task_start and self.current_task:
            # Finalizar tarea anterior
            elapsed = time.time() - self.task_start
            self.task_times[self.current_task] = elapsed

        self.current_task = task_name
        self.task_start = time.time()

        await self.update_message(f"üîÑ {task_name}...\n‚è±Ô∏è Iniciando tarea...")

    async def update_progress(self, progress_info):
        """Actualiza el progreso de la tarea actual"""
        current_time = time.time()

        # Limitar actualizaciones cada 2 segundos para evitar spam
        if current_time - self.last_update < 2:
            return

        self.last_update = current_time
        task_elapsed = current_time - self.task_start if self.task_start else 0

        mensaje = f"üîÑ {self.current_task}\n"
        mensaje += f"‚è±Ô∏è Tiempo tarea: {task_elapsed:.1f}s\n"
        mensaje += f"üìä {progress_info}\n"

        # Mostrar tiempos de tareas completadas
        if self.task_times:
            mensaje += "\n‚úÖ Tareas completadas:\n"
            for task, duration in self.task_times.items():
                mensaje += f"‚Ä¢ {task}: {duration:.1f}s\n"

        await self.update_message(mensaje)

    async def finish_task(self, success=True):
        """Finaliza la tarea actual"""
        if self.task_start and self.current_task:
            elapsed = time.time() - self.task_start
            self.task_times[self.current_task] = elapsed

        total_time = time.time() - self.start_time

        status = "‚úÖ PROCESO COMPLETADO" if success else "‚ùå PROCESO FALLIDO"

        mensaje = f"{status}\n"
        mensaje += f"üïê Tiempo total: {total_time:.1f}s\n\n"

        if self.task_times:
            mensaje += "üìã Resumen de tiempos:\n"
            for task, duration in self.task_times.items():
                mensaje += f"‚Ä¢ {task}: {duration:.1f}s\n"

        await self.update_message(mensaje)

    async def update_message(self, text):
        """Actualiza el mensaje de Telegram"""
        try:
            await self.message.edit_text(text)
        except Exception as e:
            # Si falla la edici√≥n, enviar nuevo mensaje
            logger.error(f"Error editando mensaje: {e}")

# ==================== FUNCIONES ORIGINALES ====================

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üé∂ Bienvenido a MusicDownloader Bot Avanzado\n\n"
        "üì∫ YouTube: Videos, audio, playlists\n"
        "üéµ Spotify: M√∫sica y playlists\n" 
        "üéß SoundCloud: Tracks y sets\n"
        "üíΩ Bandcamp: √Ålbumes y tracks\n\n"
        "üîÑ Nuevo: Seguimiento de progreso en tiempo real\n"
        "‚è±Ô∏è Nuevo: Tiempos detallados de cada tarea\n\n"
        "Env√≠a cualquier enlace compatible y elige tu formato preferido.\n"
        "‚úÖ Solo para fines educativos.\n\n"
        "Comandos:\n"
        "‚Ä¢ /info - Ver informaci√≥n de video/audio\n"
        "‚Ä¢ /ayuda - Gu√≠a de uso completa\n"
        "‚Ä¢ /config - Verificar configuraci√≥n del sistema"
    )

async def ayuda(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üìö Gu√≠a de uso completa:\n\n"
        "üîó Plataformas soportadas:\n"
        "‚Ä¢ YouTube (videos/audio/playlists)\n"
        "‚Ä¢ Spotify (tracks/√°lbumes/playlists)\n"
        "‚Ä¢ SoundCloud (tracks/sets)\n"
        "‚Ä¢ Bandcamp (m√∫sica)\n\n"
        "üìã Proceso de descarga:\n"
        "1Ô∏è‚É£ Env√≠a un enlace v√°lido\n"
        "2Ô∏è‚É£ Selecciona el formato deseado\n"
        "3Ô∏è‚É£ Observa el progreso en tiempo real\n"
        "4Ô∏è‚É£ Recibe tu archivo con resumen de tiempos\n\n"
        "üé• Formatos disponibles:\n"
        "‚Ä¢ MP4: Video completo (YouTube)\n"
        "‚Ä¢ MP3: Audio comprimido\n"
        "‚Ä¢ FLAC: Audio sin p√©rdida\n"
        "‚Ä¢ WAV: Audio sin comprimir\n\n"
        "üìä Informaci√≥n de progreso:\n"
        "‚Ä¢ Tiempo por tarea individual\n"
        "‚Ä¢ Progreso de descarga en %\n"
        "‚Ä¢ Velocidad de descarga\n"
        "‚Ä¢ Tiempo total del proceso\n\n"
        "‚ÑπÔ∏è Usa /info [URL] para ver detalles sin descargar\n"
        "üîß Usa /config para verificar configuraci√≥n del sistema\n"
        "‚ùóUso educativo √∫nicamente"
    )

# ==================== FUNCIONES YOUTUBE CON PROGRESO ====================

def obtener_info_youtube(url):
    """Obtiene informaci√≥n de un video de YouTube usando yt-dlp"""
    ydl_opts = {'quiet': True, 'no_warnings': True}

    try:
        with yt_dlp.YoutubeDL(ydl_opts) as ydl:
            info = ydl.extract_info(url, download=False)
            return {
                'titulo': info.get('title', 'N/A'),
                'canal': info.get('uploader', 'N/A'),
                'duracion': info.get('duration', 0),
                'fecha': info.get('upload_date', 'N/A'),
                'vistas': info.get('view_count', 0),
                'descripcion': info.get('description', 'N/A')[:200] + '...' if info.get('description') else 'N/A',
                'es_playlist': info.get('_type') == 'playlist',
                'cantidad_videos': len(info.get('entries', [])) if info.get('_type') == 'playlist' else 1,
                'tama√±o_aprox': info.get('filesize') or info.get('filesize_approx', 0)
            }
    except Exception as e:
        logger.error(f"Error obteniendo info: {e}")
        return None

class ProgressHook:
    """Clase helper para manejar el progreso de manera sincronizada"""
    def __init__(self, tracker):
        self.tracker = tracker
        self.loop = asyncio.get_event_loop()

    def __call__(self, d):
        if d['status'] == 'downloading':
            # Programar actualizaci√≥n de progreso
            self.loop.call_soon_threadsafe(
                asyncio.create_task,
                self.actualizar_progreso_descarga(d)
            )
        elif d['status'] == 'finished':
            self.loop.call_soon_threadsafe(
                asyncio.create_task,
                self.tracker.start_task("Procesando archivo final")
            )

    async def actualizar_progreso_descarga(self, d):
        """Actualiza el progreso durante la descarga"""
        try:
            if '_percent_str' in d:
                porcentaje = d['_percent_str'].strip()
            else:
                porcentaje = "N/A"

            velocidad = d.get('_speed_str', 'N/A')
            eta = d.get('_eta_str', 'N/A')
            descargado = d.get('_downloaded_bytes_str', 'N/A')
            total = d.get('_total_bytes_str', 'N/A')

            progreso = f"üìà Progreso: {porcentaje}\n"
            progreso += f"üöÄ Velocidad: {velocidad}\n"
            progreso += f"‚è≥ ETA: {eta}\n"
            progreso += f"üì¶ Descargado: {descargado}/{total}"

            await self.tracker.update_progress(progreso)

        except Exception as e:
            logger.error(f"Error actualizando progreso: {e}")

async def descargar_youtube_con_progreso(url, formato, directorio_temp, tracker):
    """Descarga video/audio de YouTube con seguimiento de progreso"""

    try:
        await tracker.start_task("Analizando video")

        # Crear hook de progreso
        progress_hook = ProgressHook(tracker)

        # Configurar opciones seg√∫n formato
        if formato == "mp4":
            await tracker.update_progress("Configurando descarga de video...")
            ydl_opts = {
                'format': 'best[height<=720]/best',
                'outtmpl': f'{directorio_temp}/%(title)s.%(ext)s',
                'quiet': True,
                'no_warnings': True,
                'progress_hooks': [progress_hook],
            }
        else:  # MP3, FLAC, WAV
            await tracker.update_progress("Configurando extracci√≥n de audio...")
            ydl_opts = {
                'format': 'bestaudio/best',
                'outtmpl': f'{directorio_temp}/%(title)s.%(ext)s',
                'postprocessors': [{
                    'key': 'FFmpegExtractAudio',
                    'preferredcodec': formato,
                    'preferredquality': '192' if formato == 'mp3' else '0',
                }],
                'quiet': True,
                'no_warnings': True,
                'progress_hooks': [progress_hook],
            }

        await tracker.start_task("Iniciando descarga")

        # Ejecutar descarga en un executor para evitar bloqueo
        loop = asyncio.get_event_loop()

        def download_sync():
            with yt_dlp.YoutubeDL(ydl_opts) as ydl:
                ydl.download([url])

        await loop.run_in_executor(None, download_sync)

        if formato != "mp4":
            await tracker.start_task("Convirtiendo audio")
            await asyncio.sleep(1)  # Simular tiempo de conversi√≥n

        return True

    except Exception as e:
        logger.error(f"Error descargando YouTube: {e}")
        return False

async def verificar_spotdl():
    """Verifica si spotdl est√° instalado y configurado"""
    try:
        proceso = await asyncio.create_subprocess_exec(
            "spotdl", "--version",
            stdout=asyncio.subprocess.PIPE,
            stderr=asyncio.subprocess.PIPE
        )
        stdout, stderr = await proceso.communicate()
        return proceso.returncode == 0
    except FileNotFoundError:
        return False

async def descargar_spotify_con_progreso(url, directorio_temp, tracker):
    """Descarga de Spotify con seguimiento de progreso"""
    try:
        await tracker.start_task("Verificando Spotify")

        # Verificar si spotdl est√° disponible
        if not await verificar_spotdl():
            logger.error("spotdl no est√° instalado o configurado")
            await tracker.update_progress("‚ùå spotdl no disponible")
            return False

        await tracker.start_task("Descargando desde Spotify")
        await tracker.update_progress("Conectando a Spotify...")

        # Configurar comando con opciones mejoradas
        comando = [
            "spotdl",
            url,
            "--output", directorio_temp,
            "--format", "mp3",
            "--bitrate", "192k",
            "--threads", "1"  # Reducir threads para evitar errores
        ]

        logger.info(f"Comando Spotify: {' '.join(comando)}")

        # Ejecutar comando con timeout
        proceso = await asyncio.create_subprocess_exec(
            *comando,
            stdout=asyncio.subprocess.PIPE,
            stderr=asyncio.subprocess.PIPE
        )

        await tracker.update_progress("Descargando metadatos...")
        await asyncio.sleep(2)

        await tracker.update_progress("Descargando audio...")

        try:
            # Timeout de 5 minutos para Spotify
            stdout, stderr = await asyncio.wait_for(
                proceso.communicate(), 
                timeout=300
            )
        except asyncio.TimeoutError:
            proceso.kill()
            logger.error("Timeout en descarga de Spotify")
            await tracker.update_progress("‚ùå Timeout en descarga")
            return False

        stdout_text = stdout.decode('utf-8', errors='ignore')
        stderr_text = stderr.decode('utf-8', errors='ignore')

        logger.info(f"Spotify stdout: {stdout_text}")
        if stderr_text:
            logger.warning(f"Spotify stderr: {stderr_text}")

        if proceso.returncode == 0:
            await tracker.update_progress("‚úÖ Descarga completada")
            # Verificar si realmente se descarg√≥ algo
            archivos = [f for f in os.listdir(directorio_temp) if f.endswith(('.mp3', '.m4a', '.flac'))]
            if archivos:
                return True
            else:
                logger.error("No se encontraron archivos descargados de Spotify")
                return False
        else:
            logger.error(f"Error Spotify (c√≥digo {proceso.returncode}): {stderr_text}")
            await tracker.update_progress(f"‚ùå Error: {stderr_text[:100]}")
            return False

    except Exception as e:
        logger.error(f"Error descargando Spotify: {e}")
        await tracker.update_progress(f"‚ùå Error: {str(e)[:100]}")
        return False

async def descargar_otros_con_progreso(url, formato, directorio_temp, tracker):
    """Descarga de SoundCloud/Bandcamp con seguimiento de progreso"""
    try:
        await tracker.start_task("Descargando desde plataforma musical")

        if formato == "mp4":
            comando = [
                "yt-dlp", "-f", "bestvideo+bestaudio/best",
                "-o", f"{directorio_temp}/%(title)s.%(ext)s", url
            ]
        else:
            comando = [
                "yt-dlp", "-o", f"{directorio_temp}/%(title)s.%(ext)s",
                "--extract-audio", "--audio-format", formato, url
            ]

        await tracker.update_progress("Iniciando descarga...")

        proceso = await asyncio.create_subprocess_exec(
            *comando,
            stdout=asyncio.subprocess.PIPE,
            stderr=asyncio.subprocess.PIPE
        )

        stdout, stderr = await proceso.communicate()

        if proceso.returncode == 0:
            await tracker.update_progress("Descarga completada")
            return True
        else:
            logger.error(f"Error otros: {stderr.decode()}")
            return False

    except Exception as e:
        logger.error(f"Error descargando otros: {e}")
        return False

# ==================== COMANDO INFO CON TIEMPOS ====================

async def info_comando(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Comando para obtener informaci√≥n de un video con medici√≥n de tiempo"""
    if len(context.args) == 0:
        await update.message.reply_text(
            "üìã Uso del comando info:\n\n"
            "/info [URL]\n\n"
            "Ejemplos:\n"
            "‚Ä¢ /info https://youtube.com/watch?v=ejemplo\n"
            "‚Ä¢ /info https://youtu.be/ejemplo\n\n"
            "‚è±Ô∏è Incluye tiempos de an√°lisis"
        )
        return

    url = context.args[0]

    if not any(x in url for x in ["spotify.com", "youtu.be", "m.youtube.com", "youtube.com", 
        "bandcamp.com", "soundcloud.com", "vt.tiktok.com", "vm.tiktok.com", "tiktok.com", "instagram.com", "facebook.com", "twitter.com", "reddit.com", "twitch.tv", "vimeo.com", "dailymotion.com", "vk.com", "ok.ru", "coub.com", "mixcloud.com", "deezer.com", "apple.com/music", "tidal.com", "qobuz.com", "amazon.com/music", "pandora.com", "pinterest.com", "pin.it", "co.pinterest.com"]):
        await update.message.reply_text("‚ùå El comando /info solo funciona con enlaces de YouTube.")
        return

    # Mensaje inicial con timestamp
    inicio = time.time()
    mensaje_inicial = await update.message.reply_text("üîç Analizando video...\n‚è±Ô∏è Iniciando an√°lisis...")

    try:
        # Obtener informaci√≥n
        info = obtener_info_youtube(url)
        tiempo_analisis = time.time() - inicio

        if info:
            duracion_texto = f"{info['duracion']//60}:{info['duracion']%60:02d}" if info['duracion'] > 0 else "N/A"
            vistas_texto = f"{info['vistas']:,}" if info['vistas'] > 0 else "N/A"
            tama√±o_mb = info['tama√±o_aprox'] / (1024 * 1024) if info['tama√±o_aprox'] else 0

            mensaje_info = f"""
‚úÖ AN√ÅLISIS COMPLETADO
‚è±Ô∏è Tiempo de an√°lisis: {tiempo_analisis:.2f}s

üì∫ INFORMACI√ìN DEL VIDEO

üé¨ T√≠tulo: {info['titulo']}
üë§ Canal: {info['canal']}
‚è±Ô∏è Duraci√≥n: {duracion_texto} min
üìÖ Fecha: {info['fecha']}
üëÄ Vistas: {vistas_texto}
üìè Tama√±o aprox: {tama√±o_mb:.1f} MB

üìù Descripci√≥n:
{info['descripcion']}

{'üéµ Tipo: Playlist (' + str(info['cantidad_videos']) + ' videos)' if info['es_playlist'] else 'üé• Tipo: Video individual'}

üí° Tip: Env√≠a este enlace al bot para descargarlo
            """

            await mensaje_inicial.edit_text(mensaje_info)
        else:
            await mensaje_inicial.edit_text(
                f"‚ùå Error en el an√°lisis\n"
                f"‚è±Ô∏è Tiempo transcurrido: {tiempo_analisis:.2f}s\n"
                f"No se pudo obtener la informaci√≥n del video."
            )

    except Exception as e:
        tiempo_error = time.time() - inicio
        await mensaje_inicial.edit_text(
            f"‚ùå Error durante el an√°lisis\n"
            f"‚è±Ô∏è Tiempo antes del error: {tiempo_error:.2f}s\n"
            f"üîç Error: {str(e)}"
        )

async def comando_config(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Comando para verificar configuraci√≥n y diagnosticar problemas"""
    mensaje_inicial = await update.message.reply_text("üîß Verificando configuraci√≥n del sistema...")

    diagnostico = "üîß DIAGN√ìSTICO DEL SISTEMA\n\n"

    # Verificar yt-dlp
    try:
        import yt_dlp
        diagnostico += "‚úÖ yt-dlp: Instalado correctamente\n"
    except ImportError:
        diagnostico += "‚ùå yt-dlp: NO instalado\n"

    # Verificar spotdl
    try:
        proceso = await asyncio.create_subprocess_exec(
            "spotdl", "--version",
            stdout=asyncio.subprocess.PIPE,
            stderr=asyncio.subprocess.PIPE
        )
        stdout, stderr = await proceso.communicate()
        if proceso.returncode == 0:
            version = stdout.decode().strip()
            diagnostico += f"‚úÖ spotdl: {version}\n"
        else:
            diagnostico += f"‚ö†Ô∏è spotdl: Instalado pero con errores\n"
    except FileNotFoundError:
        diagnostico += "‚ùå spotdl: NO instalado\n"

    # Verificar FFmpeg
    try:
        proceso = await asyncio.create_subprocess_exec(
            "ffmpeg", "-version",
            stdout=asyncio.subprocess.PIPE,
            stderr=asyncio.subprocess.PIPE
        )
        stdout, stderr = await proceso.communicate()
        if proceso.returncode == 0:
            # Extraer versi√≥n de FFmpeg
            lineas = stdout.decode().split('\n')
            version_linea = [l for l in lineas if l.startswith('ffmpeg version')]
            if version_linea:
                version = version_linea[0].split()[2]
                diagnostico += f"‚úÖ FFmpeg: {version}\n"
            else:
                diagnostico += "‚úÖ FFmpeg: Instalado\n"
        else:
            diagnostico += "‚ö†Ô∏è FFmpeg: Instalado pero con errores\n"
    except FileNotFoundError:
        diagnostico += "‚ùå FFmpeg: NO instalado\n"

    # Verificar conectividad
    diagnostico += "\nüåê CONECTIVIDAD:\n"
    try:
        import urllib.request
        urllib.request.urlopen('https://www.youtube.com', timeout=5)
        diagnostico += "‚úÖ YouTube: Accesible\n"
    except:
        diagnostico += "‚ùå YouTube: No accesible\n"

    try:
        import urllib.request
        urllib.request.urlopen('https://open.spotify.com', timeout=5)
        diagnostico += "‚úÖ Spotify: Accesible\n"
    except:
        diagnostico += "‚ùå Spotify: No accesible\n"

    # Instrucciones de soluci√≥n
    diagnostico += "\nüîß SOLUCIONES:\n\n"
    diagnostico += "üì¶ Para instalar dependencias:\n"
    diagnostico += "‚Ä¢ pip install yt-dlp spotdl\n\n"

    diagnostico += "üéµ Para configurar Spotify:\n"
    diagnostico += "‚Ä¢ spotdl --generate-config\n"
    diagnostico += "‚Ä¢ Opcionalmente configura Client ID/Secret\n\n"

    diagnostico += "üé¨ Para instalar FFmpeg:\n"
    diagnostico += "‚Ä¢ Windows: Descargar de ffmpeg.org\n"
    diagnostico += "‚Ä¢ macOS: brew install ffmpeg\n"
    diagnostico += "‚Ä¢ Linux: apt install ffmpeg\n\n"

    diagnostico += "üí° ALTERNATIVAS PARA SPOTIFY:\n"
    diagnostico += "‚Ä¢ Busca la canci√≥n en YouTube\n"
    diagnostico += "‚Ä¢ Usa SoundCloud si est√° disponible\n"
    diagnostico += "‚Ä¢ Prueba con enlaces de √°lbum completo"

    await mensaje_inicial.edit_text(diagnostico)

# ==================== FUNCIONES ACTUALIZADAS CON PROGRESO ====================

async def recibir_enlace(update: Update, context: ContextTypes.DEFAULT_TYPE):
    url = update.message.text.strip()

    # Verificar plataformas soportadas
    plataformas_soportadas = [
        "spotify.com", "youtu.be", "m.youtube.com", "youtube.com", 
        "bandcamp.com", "soundcloud.com", "vt.tiktok.com", "vm.tiktok.com", "tiktok.com", "instagram.com", "facebook.com", "twitter.com", "reddit.com", "twitch.tv", "vimeo.com", "dailymotion.com", "vk.com", "ok.ru", "coub.com", "mixcloud.com", "deezer.com", "apple.com/music", "tidal.com", "qobuz.com", "amazon.com/music", "pandora.com", 
    ]

    if not any(x in url for x in plataformas_soportadas):
        await update.message.reply_text(
            "‚ùå Enlace no soportado\n\n"
            "‚úÖ Plataformas compatibles:\n"
            "‚Ä¢ YouTube (videos/playlists)\n"
            "‚Ä¢ Spotify (m√∫sica)\n"
            "‚Ä¢ SoundCloud (tracks)\n"
            "‚Ä¢ Bandcamp (m√∫sica)\n\n"
            "üìù Env√≠a un enlace v√°lido de estas plataformas."
        )
        return

    context.user_data["url"] = url

    # An√°lisis previo para YouTube con tiempo
    if any(x in url for x in ["youtu.be", "youtube.com", "m.youtube.com"]):
        inicio_analisis = time.time()
        mensaje_analisis = await update.message.reply_text("üîç Pre-analizando video...")

        info = obtener_info_youtube(url)
        tiempo_analisis = time.time() - inicio_analisis

        if info:
            duracion = f"{info['duracion']//60}:{info['duracion']%60:02d}" if info['duracion'] > 0 else "N/A"

            await mensaje_analisis.edit_text(
                f"‚úÖ An√°lisis completado ({tiempo_analisis:.1f}s)\n\n"
                f"üì∫ Video detectado:\n"
                f"üé¨ {info['titulo']}\n"
                f"üë§ {info['canal']}\n"
                f"‚è±Ô∏è {duracion} min\n"
                f"{'üéµ Playlist (' + str(info['cantidad_videos']) + ' videos)' if info['es_playlist'] else 'üé• Video individual'}\n\n"
                f"‚¨áÔ∏è Selecciona el formato:"
            )

    # Crear teclado de opciones
    keyboard = [
        [
            InlineKeyboardButton("üéµ MP3", callback_data="format:mp3"),
            InlineKeyboardButton("üé∂ FLAC", callback_data="format:flac"),
            InlineKeyboardButton("üíΩ WAV", callback_data="format:wav"),
            InlineKeyboardButton("üì± MP4", callback_data="format:mp4")
        ]
    ]

    if not any(x in url for x in ["youtu.be", "youtube.com", "m.youtube.com"]):
        await update.message.reply_text(
            "üéØ Selecciona el formato de descarga:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    else:
        # Para YouTube, enviar teclado en mensaje separado
        await update.message.reply_text(
            "‚ö° ¬°Listo para descargar!",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

async def descargar(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    formato = query.data.split(":")[1]
    url = context.user_data.get("url")

    if not url:
        await query.edit_message_text("‚ö†Ô∏è Error: No se encontr√≥ enlace v√°lido.")
        return

    # Crear tracker de progreso
    mensaje_inicial = await query.message.reply_text(
        f"üöÄ INICIANDO DESCARGA\n"
        f"üéØ Formato: {formato.upper()}\n"
        f"üîó Preparando proceso..."
    )

    tracker = ProgressTracker(mensaje_inicial)

    # Crear directorio temporal
    with tempfile.TemporaryDirectory() as temp_dir:
        try:
            exito = False
            es_youtube = any(x in url for x in ["youtu.be", "youtube.com", "m.youtube.com"])
            es_spotify = "spotify.com" in url

            # Determinar m√©todo de descarga
            if es_spotify:
                # Verificar spotdl antes de intentar
                if not await verificar_spotdl():
                    await tracker.start_task("Spotify no disponible, intentando con yt-dlp")
                    await tracker.update_progress("Buscando alternativa en YouTube...")

                    # Intentar con yt-dlp como respaldo
                    exito = await descargar_youtube_con_progreso(url, formato, temp_dir, tracker)

                    if not exito:
                        await tracker.finish_task(success=False)
                        await query.message.reply_text(
                            "‚ùå Spotify no disponible\n\n"
                            "üîß Soluciones:\n"
                            "1. Instala spotdl: pip install spotdl\n"
                            "2. Verifica que FFmpeg est√© instalado\n"
                            "3. Configura spotdl: spotdl --generate-config\n"
                            "4. Usa /config para diagn√≥stico completo\n\n"
                            "üí° Alternativas:\n"
                            "‚Ä¢ Busca la canci√≥n en YouTube\n"
                            "‚Ä¢ Copia el nombre y b√∫scalo manualmente"
                        )
                        return
                else:
                    exito = await descargar_spotify_con_progreso(url, temp_dir, tracker)

                    # Si falla Spotify, intentar con YouTube
                    if not exito:
                        await tracker.start_task("Spotify fall√≥, intentando alternativa")
                        await tracker.update_progress("Probando m√©todo alternativo...")

                        # Extraer nombre de la canci√≥n para buscar en YouTube
                        try:
                            import re
                            # Extraer informaci√≥n b√°sica del enlace de Spotify
                            if "/track/" in url:
                                track_id = url.split("/track/")[1].split("?")[0]
                                search_query = f"ytsearch1:{track_id}"  # B√∫squeda b√°sica
                                exito = await descargar_youtube_con_progreso(search_query, formato, temp_dir, tracker)
                        except:
                            pass
            elif es_youtube:
                exito = await descargar_youtube_con_progreso(url, formato, temp_dir, tracker)
            else:  # SoundCloud, Bandcamp
                exito = await descargar_otros_con_progreso(url, formato, temp_dir, tracker)

            if exito:
                await tracker.start_task("Enviando archivos")

                archivos = [f for f in os.listdir(temp_dir) if os.path.isfile(os.path.join(temp_dir, f))]
                archivos_enviados = 0
                archivos_info = []

                if not archivos:
                    await tracker.finish_task(success=False)
                    await query.message.reply_text("‚ùå No se encontraron archivos descargados.")
                    return

                for archivo in archivos:
                    ruta = os.path.join(temp_dir, archivo)
                    tama√±o_mb = os.path.getsize(ruta) / (1024 * 1024)

                    if tama√±o_mb > 50:
                        archivos_info.append(f"‚ö†Ô∏è {archivo}: {tama√±o_mb:.1f}MB (muy grande)")
                        continue

                    try:
                        inicio_envio = time.time()

                        if formato == "mp4" and archivo.endswith(('.mp4', '.mkv', '.webm')):
                            with open(ruta, "rb") as video_file:
                                await query.message.reply_video(
                                    video=video_file,
                                    caption=f"üì± {archivo}\nüéØ {formato.upper()} ‚Ä¢ {tama√±o_mb:.1f}MB"
                                )
                        else:
                            with open(ruta, "rb") as audio_file:
                                await query.message.reply_audio(
                                    audio=audio_file,
                                    title=archivo.rsplit('.', 1)[0],
                                    caption=f"üéµ {archivo}\nüéØ {archivo.split('.')[-1].upper()} ‚Ä¢ {tama√±o_mb:.1f}MB"
                                )

                        tiempo_envio = time.time() - inicio_envio
                        archivos_enviados += 1
                        archivos_info.append(f"‚úÖ {archivo}: {tama√±o_mb:.1f}MB ({tiempo_envio:.1f}s)")

                    except Exception as e:
                        logger.error(f"Error enviando {archivo}: {e}")
                        archivos_info.append(f"‚ùå {archivo}: Error - {str(e)[:50]}")

                # Finalizar con resumen completo
                await tracker.finish_task(success=True)

                # Enviar resumen detallado
                resumen = f"üìä RESUMEN DETALLADO\n\n"
                resumen += f"üìÅ Archivos procesados: {len(archivos)}\n"
                resumen += f"‚úÖ Enviados exitosamente: {archivos_enviados}\n"
                resumen += f"üéØ Formato: {formato.upper()}\n\n"

                if archivos_info:
                    resumen += "üìã Detalle de archivos:\n"
                    for info in archivos_info[:10]:  # Limitar a 10 para no saturar
                        resumen += f"‚Ä¢ {info}\n"

                resumen += f"\nüîÑ Env√≠a otro enlace para continuar"

                await query.message.reply_text(resumen)

            else:
                await tracker.finish_task(success=False)
                await query.message.reply_text("‚ùå Error durante la descarga. Revisa la consola para m√°s detalles.")

        except Exception as e:
            await tracker.finish_task(success=False)
            logger.error(f"Error general en descarga: {e}")
            await query.message.reply_text(f"‚ùå Error inesperado:\n{str(e)[:200]}")

# ==================== CONFIGURACI√ìN DEL BOT ====================

def main():
    """Funci√≥n principal para ejecutar el bot"""

    print("üöÄ Iniciando MusicDownloader Bot con seguimiento de progreso...")

    # Verificar dependencias cr√≠ticas
    dependencias = {
        'yt-dlp': 'yt-dlp',
        'spotdl': 'spotdl', 
        'ffmpeg': 'ffmpeg'
    }

    for nombre, comando in dependencias.items():
        try:
            if nombre == 'yt-dlp':
                import yt_dlp
                print(f"‚úÖ {nombre} disponible")
            else:
                resultado = subprocess.run([comando, '--version'], 
                                         capture_output=True, 
                                         timeout=5)
                if resultado.returncode == 0:
                    print(f"‚úÖ {nombre} disponible")
                else:
                    print(f"‚ö†Ô∏è {nombre} instalado pero con problemas")
        except (ImportError, FileNotFoundError, subprocess.TimeoutExpired):
            print(f"‚ùå {nombre} no disponible")
            if nombre == 'yt-dlp':
                print("   Instala con: pip install yt-dlp")
            elif nombre == 'spotdl':
                print("   Instala con: pip install spotdl")
                print("   Configura con: spotdl --generate-config")
            elif nombre == 'ffmpeg':
                print("   Instala FFmpeg desde: https://ffmpeg.org/download.html")

    # Crear directorio de descargas
    if not os.path.exists(DOWNLOAD_DIR):
        os.makedirs(DOWNLOAD_DIR)
        print(f"üìÅ Directorio creado: {DOWNLOAD_DIR}")

    # Configurar el bot
    app = Application.builder().token(TOKEN).build()

    # A√±adir manejadores
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("ayuda", ayuda))
    app.add_handler(CommandHandler("info", info_comando))
    app.add_handler(CommandHandler("config", comando_config))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, recibir_enlace))
    app.add_handler(CallbackQueryHandler(descargar, pattern="^format:"))

    print("ü§ñ Bot iniciado correctamente")
    print("üìä Caracter√≠sticas:")
    print("  ‚Ä¢ Seguimiento de progreso en tiempo real")
    print("  ‚Ä¢ Medici√≥n de tiempo por tarea")
    print("  ‚Ä¢ Res√∫menes detallados de descarga")
    print("  ‚Ä¢ Soporte YouTube, Spotify, SoundCloud, Bandcamp")
    print("  ‚Ä¢ Manejo robusto de errores")
    print("  ‚Ä¢ Diagn√≥stico de dependencias")
    print("\n‚úÖ Listo para recibir enlaces...")
    print("\nüí° Si Spotify no funciona, usa: /config")

    # Ejecutar bot
    app.run_polling()

if __name__ == "__main__":
    main()