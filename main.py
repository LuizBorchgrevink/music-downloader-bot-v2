from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, filters, ContextTypes
import subprocess
import os
import yt_dlp
from pathlib import Path
import tempfile
import logging
import time
import asyncio
from datetime import datetime
from flask import Flask
 

# Configurar logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Configuraci√≥n de Flask para mantener activo el bot
app = Flask(__name__)

@app.route('/')
def home():
    return "Bot activo!"

TOKEN = os.environ.get('TOKEN')
DOWNLOAD_DIR = "descargas"

class ProgressTracker:
    def __init__(self, message):
        self.message = message
        self.start_time = time.time()
        self.last_update = 0
        self.current_task = ""
        self.task_times = {}
        self.task_start = None

    async def start_task(self, task_name):
        if self.task_start and self.current_task:
            elapsed = time.time() - self.task_start
            self.task_times[self.current_task] = elapsed

        self.current_task = task_name
        self.task_start = time.time()
        await self.update_message(f"üîÑ {task_name}...\n‚è±Ô∏è Iniciando tarea...")

    async def update_progress(self, progress_info):
        current_time = time.time()
        if current_time - self.last_update < 2:
            return

        self.last_update = current_time
        task_elapsed = current_time - self.task_start if self.task_start else 0

        mensaje = f"üîÑ {self.current_task}\n"
        mensaje += f"‚è±Ô∏è Tiempo tarea: {task_elapsed:.1f}s\n"
        mensaje += f"üìä {progress_info}\n"

        if self.task_times:
            mensaje += "\n‚úÖ Tareas completadas:\n"
            for task, duration in self.task_times.items():
                mensaje += f"‚Ä¢ {task}: {duration:.1f}s\n"

        await self.update_message(mensaje)

    async def finish_task(self, success=True):
        if self.task_start and self.current_task:
            elapsed = time.time() - self.task_start
            self.task_times[self.current_task] = elapsed

        total_time = time.time() - self.start_time

        status = "‚úÖ PROCESO COMPLETADO" if success else "‚ùå PROCESO FALLIDO"

        mensaje = f"{status}\n"
        mensaje += f"üïê Tiempo total: {total_time:.1f}s\n\n"

        if self.task_times:
            mensaje += "üìã Resumen de tiempos:\n"
            for task, duration in self.task_times.items():
                mensaje += f"‚Ä¢ {task}: {duration:.1f}s\n"

        await self.update_message(mensaje)

    async def update_message(self, text):
        try:
            await self.message.edit_text(text)
        except Exception as e:
            logger.error(f"Error editando mensaje: {e}")

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üé∂ Bienvenido a MusicDownloader Bot Avanzado\n\n"
        "üì∫ YouTube: Videos, audio, playlists\n"
        "üéµ Spotify: M√∫sica y playlists\n" 
        "üéß SoundCloud: Tracks y sets\n"
        "üíΩ Bandcamp: √Ålbumes y tracks\n\n"
        "Env√≠a cualquier enlace compatible y elige tu formato preferido.\n"
        "‚úÖ Solo para fines educativos.\n\n"
        "Comandos:\n"
        "‚Ä¢ /info - Ver informaci√≥n de video/audio\n"
        "‚Ä¢ /ayuda - Gu√≠a de uso completa\n"
        "‚Ä¢ /config - Verificar configuraci√≥n del sistema"
    )

async def ayuda(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üìö Gu√≠a de uso completa:\n\n"
        "üîó Plataformas soportadas:\n"
        "‚Ä¢ YouTube (videos/audio/playlists)\n"
        "‚Ä¢ Spotify (tracks/√°lbumes/playlists)\n"
        "‚Ä¢ SoundCloud (tracks/sets)\n"
        "‚Ä¢ Bandcamp (m√∫sica)\n\n"
        "üìã Proceso de descarga:\n"
        "1Ô∏è‚É£ Env√≠a un enlace v√°lido\n"
        "2Ô∏è‚É£ Selecciona el formato deseado\n"
        "3Ô∏è‚É£ Observa el progreso en tiempo real\n"
        "4Ô∏è‚É£ Recibe tu archivo con resumen de tiempos\n\n"
        "‚ÑπÔ∏è Usa /info [URL] para ver detalles sin descargar\n"
        "üîß Usa /config para verificar configuraci√≥n del sistema\n"
        "‚ùóUso educativo √∫nicamente"
    )

async def info_comando(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if len(context.args) == 0:
        await update.message.reply_text("üìã Uso: /info [URL]")
        return

    url = context.args[0]

    if not any(x in url for x in ["youtu.be", "youtube.com"]):
        await update.message.reply_text("‚ùå Solo enlaces de YouTube")
        return

    mensaje_inicial = await update.message.reply_text("üîç Analizando video...")

    try:
        info = obtener_info_youtube(url)

        if info:
            duracion_texto = f"{info['duracion']//60}:{info['duracion']%60:02d}" if info['duracion'] > 0 else "N/A"

            mensaje_info = f"""
‚úÖ INFORMACI√ìN DEL VIDEO

üé¨ T√≠tulo: {info['titulo']}
üë§ Canal: {info['canal']}
‚è±Ô∏è Duraci√≥n: {duracion_texto}
üìÖ Fecha: {info['fecha']}
            """
            await mensaje_inicial.edit_text(mensaje_info)
        else:
            await mensaje_inicial.edit_text("‚ùå Error al obtener informaci√≥n")

    except Exception as e:
        await mensaje_inicial.edit_text(f"‚ùå Error: {str(e)}")

async def comando_config(update: Update, context: ContextTypes.DEFAULT_TYPE):
    mensaje = "üîß DIAGN√ìSTICO DEL SISTEMA\n\n"

    # Verificaciones b√°sicas
    try:
        import yt_dlp
        mensaje += "‚úÖ yt-dlp instalado\n"
    except ImportError:
        mensaje += "‚ùå yt-dlp NO instalado\n"

    await update.message.reply_text(mensaje)

def obtener_info_youtube(url):
    ydl_opts = {'quiet': True, 'no_warnings': True}

    try:
        with yt_dlp.YoutubeDL(ydl_opts) as ydl:
            info = ydl.extract_info(url, download=False)
            return {
                'titulo': info.get('title', 'N/A'),
                'canal': info.get('uploader', 'N/A'),
                'duracion': info.get('duration', 0),
                'fecha': info.get('upload_date', 'N/A'),
            }
    except Exception as e:
        logger.error(f"Error obteniendo info: {e}")
        return None

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # Aqu√≠ ir√≠a tu l√≥gica para manejar los mensajes de descarga
    await update.message.reply_text("üîç Procesando tu enlace...")

def run_flask():
    app.run(host='0.0.0.0', port=8080)
     

def main():
    application = Application.builder().token(TOKEN).build()

    # Manejadores
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("ayuda", ayuda))
    application.add_handler(CommandHandler("info", info_comando))
    application.add_handler(CommandHandler("config", comando_config))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    # Iniciar Flask en segundo plano
    import threading
    flask_thread = threading.Thread(target=run_flask, daemon=True)
    flask_thread.start()

    # Iniciar bot
    application.run_polling()

if __name__ == "__main__":
    main()